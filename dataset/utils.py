import math, random
import unicodedata
import re
import torch

def generate_indices(target_len, total_len = 50):
	"""
        Generate indices for the target sentence.
        The indices are generated by randomly sampling from the sentences of the same length.
    """
	i = target_len - 1
	
	average = (total_len - 1) / i
	a = math.floor(average)
	b = math.ceil(average)
	
	for j in range(1, i + 1):
		if j * a + (i - j) * b == total_len - 1:
			break
	gaps = [a] * j + [b] * (i - j)
	random.shuffle(gaps)
	k = 0
	ans = [0]
	for val in gaps:
		ans.append(ans[-1] + val)
	return torch.tensor(ans)

## Define helpful functions ##
def unicodeToAscii(s):
	return ''.join(
		c for c in unicodedata.normalize('NFD', s)
		if unicodedata.category(c) != 'Mn'
	)

def normalizeString(s):
	s = unicodeToAscii(s.lower().strip())
	s = re.sub(r"([.!?])", r" \1", s)
	s = re.sub(r"[^a-zA-Z.!?]+", r" ", s)
	return s